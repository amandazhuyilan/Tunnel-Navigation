classdef Misc1Report < robotics.ros.Message
    %Misc1Report MATLAB implementation of dbw_mkz_msgs/Misc1Report
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dbw_mkz_msgs/Misc1Report' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '9ecd16fb81815b3e46e0550feea1da2f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        DbwMkzMsgsAmbientLightClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dbw_mkz_msgs/AmbientLight') % Dispatch to MATLAB class for message type dbw_mkz_msgs/AmbientLight
        DbwMkzMsgsTurnSignalClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dbw_mkz_msgs/TurnSignal') % Dispatch to MATLAB class for message type dbw_mkz_msgs/TurnSignal
        DbwMkzMsgsWiperClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dbw_mkz_msgs/Wiper') % Dispatch to MATLAB class for message type dbw_mkz_msgs/Wiper
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        TurnSignal
        HighBeamHeadlights
        Wiper
        AmbientLight
        BtnCcOn
        BtnCcOff
        BtnCcOnOff
        BtnCcRes
        BtnCcCncl
        BtnCcResCncl
        BtnCcSetInc
        BtnCcSetDec
        BtnCcGapInc
        BtnCcGapDec
        BtnLaOnOff
        FaultBus
        DoorDriver
        DoorPassenger
        DoorRearLeft
        DoorRearRight
        DoorHood
        DoorTrunk
        PassengerDetect
        PassengerAirbag
        BuckleDriver
        BucklePassenger
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'TurnSignal', [], 'Wiper', [], 'AmbientLight', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AmbientLight', 'BtnCcCncl', 'BtnCcGapDec', 'BtnCcGapInc', 'BtnCcOff', 'BtnCcOn', 'BtnCcOnOff', 'BtnCcRes', 'BtnCcResCncl', 'BtnCcSetDec', 'BtnCcSetInc', 'BtnLaOnOff', 'BuckleDriver', 'BucklePassenger', 'DoorDriver', 'DoorHood', 'DoorPassenger', 'DoorRearLeft', 'DoorRearRight', 'DoorTrunk', 'FaultBus', 'Header', 'HighBeamHeadlights', 'PassengerAirbag', 'PassengerDetect', 'TurnSignal', 'Wiper'} % List of non-constant message properties
        ROSPropertyList = {'ambient_light', 'btn_cc_cncl', 'btn_cc_gap_dec', 'btn_cc_gap_inc', 'btn_cc_off', 'btn_cc_on', 'btn_cc_on_off', 'btn_cc_res', 'btn_cc_res_cncl', 'btn_cc_set_dec', 'btn_cc_set_inc', 'btn_la_on_off', 'buckle_driver', 'buckle_passenger', 'door_driver', 'door_hood', 'door_passenger', 'door_rear_left', 'door_rear_right', 'door_trunk', 'fault_bus', 'header', 'high_beam_headlights', 'passenger_airbag', 'passenger_detect', 'turn_signal', 'wiper'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Misc1Report(msg)
            %Misc1Report Construct the message object Misc1Report
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Misc1Report', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function turnsignal = get.TurnSignal(obj)
            %get.TurnSignal Get the value for property TurnSignal
            if isempty(obj.Cache.TurnSignal)
                obj.Cache.TurnSignal = feval(obj.DbwMkzMsgsTurnSignalClass, obj.JavaMessage.getTurnSignal);
            end
            turnsignal = obj.Cache.TurnSignal;
        end
        
        function set.TurnSignal(obj, turnsignal)
            %set.TurnSignal Set the value for property TurnSignal
            validateattributes(turnsignal, {obj.DbwMkzMsgsTurnSignalClass}, {'nonempty', 'scalar'}, 'Misc1Report', 'TurnSignal');
            
            obj.JavaMessage.setTurnSignal(turnsignal.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.TurnSignal)
                obj.Cache.TurnSignal.setJavaObject(turnsignal.getJavaObject);
            end
        end
        
        function highbeamheadlights = get.HighBeamHeadlights(obj)
            %get.HighBeamHeadlights Get the value for property HighBeamHeadlights
            highbeamheadlights = logical(obj.JavaMessage.getHighBeamHeadlights);
        end
        
        function set.HighBeamHeadlights(obj, highbeamheadlights)
            %set.HighBeamHeadlights Set the value for property HighBeamHeadlights
            validateattributes(highbeamheadlights, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'HighBeamHeadlights');
            
            obj.JavaMessage.setHighBeamHeadlights(highbeamheadlights);
        end
        
        function wiper = get.Wiper(obj)
            %get.Wiper Get the value for property Wiper
            if isempty(obj.Cache.Wiper)
                obj.Cache.Wiper = feval(obj.DbwMkzMsgsWiperClass, obj.JavaMessage.getWiper);
            end
            wiper = obj.Cache.Wiper;
        end
        
        function set.Wiper(obj, wiper)
            %set.Wiper Set the value for property Wiper
            validateattributes(wiper, {obj.DbwMkzMsgsWiperClass}, {'nonempty', 'scalar'}, 'Misc1Report', 'Wiper');
            
            obj.JavaMessage.setWiper(wiper.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Wiper)
                obj.Cache.Wiper.setJavaObject(wiper.getJavaObject);
            end
        end
        
        function ambientlight = get.AmbientLight(obj)
            %get.AmbientLight Get the value for property AmbientLight
            if isempty(obj.Cache.AmbientLight)
                obj.Cache.AmbientLight = feval(obj.DbwMkzMsgsAmbientLightClass, obj.JavaMessage.getAmbientLight);
            end
            ambientlight = obj.Cache.AmbientLight;
        end
        
        function set.AmbientLight(obj, ambientlight)
            %set.AmbientLight Set the value for property AmbientLight
            validateattributes(ambientlight, {obj.DbwMkzMsgsAmbientLightClass}, {'nonempty', 'scalar'}, 'Misc1Report', 'AmbientLight');
            
            obj.JavaMessage.setAmbientLight(ambientlight.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AmbientLight)
                obj.Cache.AmbientLight.setJavaObject(ambientlight.getJavaObject);
            end
        end
        
        function btnccon = get.BtnCcOn(obj)
            %get.BtnCcOn Get the value for property BtnCcOn
            btnccon = logical(obj.JavaMessage.getBtnCcOn);
        end
        
        function set.BtnCcOn(obj, btnccon)
            %set.BtnCcOn Set the value for property BtnCcOn
            validateattributes(btnccon, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcOn');
            
            obj.JavaMessage.setBtnCcOn(btnccon);
        end
        
        function btnccoff = get.BtnCcOff(obj)
            %get.BtnCcOff Get the value for property BtnCcOff
            btnccoff = logical(obj.JavaMessage.getBtnCcOff);
        end
        
        function set.BtnCcOff(obj, btnccoff)
            %set.BtnCcOff Set the value for property BtnCcOff
            validateattributes(btnccoff, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcOff');
            
            obj.JavaMessage.setBtnCcOff(btnccoff);
        end
        
        function btncconoff = get.BtnCcOnOff(obj)
            %get.BtnCcOnOff Get the value for property BtnCcOnOff
            btncconoff = logical(obj.JavaMessage.getBtnCcOnOff);
        end
        
        function set.BtnCcOnOff(obj, btncconoff)
            %set.BtnCcOnOff Set the value for property BtnCcOnOff
            validateattributes(btncconoff, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcOnOff');
            
            obj.JavaMessage.setBtnCcOnOff(btncconoff);
        end
        
        function btnccres = get.BtnCcRes(obj)
            %get.BtnCcRes Get the value for property BtnCcRes
            btnccres = logical(obj.JavaMessage.getBtnCcRes);
        end
        
        function set.BtnCcRes(obj, btnccres)
            %set.BtnCcRes Set the value for property BtnCcRes
            validateattributes(btnccres, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcRes');
            
            obj.JavaMessage.setBtnCcRes(btnccres);
        end
        
        function btncccncl = get.BtnCcCncl(obj)
            %get.BtnCcCncl Get the value for property BtnCcCncl
            btncccncl = logical(obj.JavaMessage.getBtnCcCncl);
        end
        
        function set.BtnCcCncl(obj, btncccncl)
            %set.BtnCcCncl Set the value for property BtnCcCncl
            validateattributes(btncccncl, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcCncl');
            
            obj.JavaMessage.setBtnCcCncl(btncccncl);
        end
        
        function btnccrescncl = get.BtnCcResCncl(obj)
            %get.BtnCcResCncl Get the value for property BtnCcResCncl
            btnccrescncl = logical(obj.JavaMessage.getBtnCcResCncl);
        end
        
        function set.BtnCcResCncl(obj, btnccrescncl)
            %set.BtnCcResCncl Set the value for property BtnCcResCncl
            validateattributes(btnccrescncl, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcResCncl');
            
            obj.JavaMessage.setBtnCcResCncl(btnccrescncl);
        end
        
        function btnccsetinc = get.BtnCcSetInc(obj)
            %get.BtnCcSetInc Get the value for property BtnCcSetInc
            btnccsetinc = logical(obj.JavaMessage.getBtnCcSetInc);
        end
        
        function set.BtnCcSetInc(obj, btnccsetinc)
            %set.BtnCcSetInc Set the value for property BtnCcSetInc
            validateattributes(btnccsetinc, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcSetInc');
            
            obj.JavaMessage.setBtnCcSetInc(btnccsetinc);
        end
        
        function btnccsetdec = get.BtnCcSetDec(obj)
            %get.BtnCcSetDec Get the value for property BtnCcSetDec
            btnccsetdec = logical(obj.JavaMessage.getBtnCcSetDec);
        end
        
        function set.BtnCcSetDec(obj, btnccsetdec)
            %set.BtnCcSetDec Set the value for property BtnCcSetDec
            validateattributes(btnccsetdec, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcSetDec');
            
            obj.JavaMessage.setBtnCcSetDec(btnccsetdec);
        end
        
        function btnccgapinc = get.BtnCcGapInc(obj)
            %get.BtnCcGapInc Get the value for property BtnCcGapInc
            btnccgapinc = logical(obj.JavaMessage.getBtnCcGapInc);
        end
        
        function set.BtnCcGapInc(obj, btnccgapinc)
            %set.BtnCcGapInc Set the value for property BtnCcGapInc
            validateattributes(btnccgapinc, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcGapInc');
            
            obj.JavaMessage.setBtnCcGapInc(btnccgapinc);
        end
        
        function btnccgapdec = get.BtnCcGapDec(obj)
            %get.BtnCcGapDec Get the value for property BtnCcGapDec
            btnccgapdec = logical(obj.JavaMessage.getBtnCcGapDec);
        end
        
        function set.BtnCcGapDec(obj, btnccgapdec)
            %set.BtnCcGapDec Set the value for property BtnCcGapDec
            validateattributes(btnccgapdec, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnCcGapDec');
            
            obj.JavaMessage.setBtnCcGapDec(btnccgapdec);
        end
        
        function btnlaonoff = get.BtnLaOnOff(obj)
            %get.BtnLaOnOff Get the value for property BtnLaOnOff
            btnlaonoff = logical(obj.JavaMessage.getBtnLaOnOff);
        end
        
        function set.BtnLaOnOff(obj, btnlaonoff)
            %set.BtnLaOnOff Set the value for property BtnLaOnOff
            validateattributes(btnlaonoff, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BtnLaOnOff');
            
            obj.JavaMessage.setBtnLaOnOff(btnlaonoff);
        end
        
        function faultbus = get.FaultBus(obj)
            %get.FaultBus Get the value for property FaultBus
            faultbus = logical(obj.JavaMessage.getFaultBus);
        end
        
        function set.FaultBus(obj, faultbus)
            %set.FaultBus Set the value for property FaultBus
            validateattributes(faultbus, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'FaultBus');
            
            obj.JavaMessage.setFaultBus(faultbus);
        end
        
        function doordriver = get.DoorDriver(obj)
            %get.DoorDriver Get the value for property DoorDriver
            doordriver = logical(obj.JavaMessage.getDoorDriver);
        end
        
        function set.DoorDriver(obj, doordriver)
            %set.DoorDriver Set the value for property DoorDriver
            validateattributes(doordriver, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorDriver');
            
            obj.JavaMessage.setDoorDriver(doordriver);
        end
        
        function doorpassenger = get.DoorPassenger(obj)
            %get.DoorPassenger Get the value for property DoorPassenger
            doorpassenger = logical(obj.JavaMessage.getDoorPassenger);
        end
        
        function set.DoorPassenger(obj, doorpassenger)
            %set.DoorPassenger Set the value for property DoorPassenger
            validateattributes(doorpassenger, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorPassenger');
            
            obj.JavaMessage.setDoorPassenger(doorpassenger);
        end
        
        function doorrearleft = get.DoorRearLeft(obj)
            %get.DoorRearLeft Get the value for property DoorRearLeft
            doorrearleft = logical(obj.JavaMessage.getDoorRearLeft);
        end
        
        function set.DoorRearLeft(obj, doorrearleft)
            %set.DoorRearLeft Set the value for property DoorRearLeft
            validateattributes(doorrearleft, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorRearLeft');
            
            obj.JavaMessage.setDoorRearLeft(doorrearleft);
        end
        
        function doorrearright = get.DoorRearRight(obj)
            %get.DoorRearRight Get the value for property DoorRearRight
            doorrearright = logical(obj.JavaMessage.getDoorRearRight);
        end
        
        function set.DoorRearRight(obj, doorrearright)
            %set.DoorRearRight Set the value for property DoorRearRight
            validateattributes(doorrearright, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorRearRight');
            
            obj.JavaMessage.setDoorRearRight(doorrearright);
        end
        
        function doorhood = get.DoorHood(obj)
            %get.DoorHood Get the value for property DoorHood
            doorhood = logical(obj.JavaMessage.getDoorHood);
        end
        
        function set.DoorHood(obj, doorhood)
            %set.DoorHood Set the value for property DoorHood
            validateattributes(doorhood, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorHood');
            
            obj.JavaMessage.setDoorHood(doorhood);
        end
        
        function doortrunk = get.DoorTrunk(obj)
            %get.DoorTrunk Get the value for property DoorTrunk
            doortrunk = logical(obj.JavaMessage.getDoorTrunk);
        end
        
        function set.DoorTrunk(obj, doortrunk)
            %set.DoorTrunk Set the value for property DoorTrunk
            validateattributes(doortrunk, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'DoorTrunk');
            
            obj.JavaMessage.setDoorTrunk(doortrunk);
        end
        
        function passengerdetect = get.PassengerDetect(obj)
            %get.PassengerDetect Get the value for property PassengerDetect
            passengerdetect = logical(obj.JavaMessage.getPassengerDetect);
        end
        
        function set.PassengerDetect(obj, passengerdetect)
            %set.PassengerDetect Set the value for property PassengerDetect
            validateattributes(passengerdetect, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'PassengerDetect');
            
            obj.JavaMessage.setPassengerDetect(passengerdetect);
        end
        
        function passengerairbag = get.PassengerAirbag(obj)
            %get.PassengerAirbag Get the value for property PassengerAirbag
            passengerairbag = logical(obj.JavaMessage.getPassengerAirbag);
        end
        
        function set.PassengerAirbag(obj, passengerairbag)
            %set.PassengerAirbag Set the value for property PassengerAirbag
            validateattributes(passengerairbag, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'PassengerAirbag');
            
            obj.JavaMessage.setPassengerAirbag(passengerairbag);
        end
        
        function buckledriver = get.BuckleDriver(obj)
            %get.BuckleDriver Get the value for property BuckleDriver
            buckledriver = logical(obj.JavaMessage.getBuckleDriver);
        end
        
        function set.BuckleDriver(obj, buckledriver)
            %set.BuckleDriver Set the value for property BuckleDriver
            validateattributes(buckledriver, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BuckleDriver');
            
            obj.JavaMessage.setBuckleDriver(buckledriver);
        end
        
        function bucklepassenger = get.BucklePassenger(obj)
            %get.BucklePassenger Get the value for property BucklePassenger
            bucklepassenger = logical(obj.JavaMessage.getBucklePassenger);
        end
        
        function set.BucklePassenger(obj, bucklepassenger)
            %set.BucklePassenger Set the value for property BucklePassenger
            validateattributes(bucklepassenger, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Misc1Report', 'BucklePassenger');
            
            obj.JavaMessage.setBucklePassenger(bucklepassenger);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.TurnSignal = [];
            obj.Cache.Wiper = [];
            obj.Cache.AmbientLight = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.HighBeamHeadlights = obj.HighBeamHeadlights;
            cpObj.BtnCcOn = obj.BtnCcOn;
            cpObj.BtnCcOff = obj.BtnCcOff;
            cpObj.BtnCcOnOff = obj.BtnCcOnOff;
            cpObj.BtnCcRes = obj.BtnCcRes;
            cpObj.BtnCcCncl = obj.BtnCcCncl;
            cpObj.BtnCcResCncl = obj.BtnCcResCncl;
            cpObj.BtnCcSetInc = obj.BtnCcSetInc;
            cpObj.BtnCcSetDec = obj.BtnCcSetDec;
            cpObj.BtnCcGapInc = obj.BtnCcGapInc;
            cpObj.BtnCcGapDec = obj.BtnCcGapDec;
            cpObj.BtnLaOnOff = obj.BtnLaOnOff;
            cpObj.FaultBus = obj.FaultBus;
            cpObj.DoorDriver = obj.DoorDriver;
            cpObj.DoorPassenger = obj.DoorPassenger;
            cpObj.DoorRearLeft = obj.DoorRearLeft;
            cpObj.DoorRearRight = obj.DoorRearRight;
            cpObj.DoorHood = obj.DoorHood;
            cpObj.DoorTrunk = obj.DoorTrunk;
            cpObj.PassengerDetect = obj.PassengerDetect;
            cpObj.PassengerAirbag = obj.PassengerAirbag;
            cpObj.BuckleDriver = obj.BuckleDriver;
            cpObj.BucklePassenger = obj.BucklePassenger;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.TurnSignal = copy(obj.TurnSignal);
            cpObj.Wiper = copy(obj.Wiper);
            cpObj.AmbientLight = copy(obj.AmbientLight);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.HighBeamHeadlights = strObj.HighBeamHeadlights;
            obj.BtnCcOn = strObj.BtnCcOn;
            obj.BtnCcOff = strObj.BtnCcOff;
            obj.BtnCcOnOff = strObj.BtnCcOnOff;
            obj.BtnCcRes = strObj.BtnCcRes;
            obj.BtnCcCncl = strObj.BtnCcCncl;
            obj.BtnCcResCncl = strObj.BtnCcResCncl;
            obj.BtnCcSetInc = strObj.BtnCcSetInc;
            obj.BtnCcSetDec = strObj.BtnCcSetDec;
            obj.BtnCcGapInc = strObj.BtnCcGapInc;
            obj.BtnCcGapDec = strObj.BtnCcGapDec;
            obj.BtnLaOnOff = strObj.BtnLaOnOff;
            obj.FaultBus = strObj.FaultBus;
            obj.DoorDriver = strObj.DoorDriver;
            obj.DoorPassenger = strObj.DoorPassenger;
            obj.DoorRearLeft = strObj.DoorRearLeft;
            obj.DoorRearRight = strObj.DoorRearRight;
            obj.DoorHood = strObj.DoorHood;
            obj.DoorTrunk = strObj.DoorTrunk;
            obj.PassengerDetect = strObj.PassengerDetect;
            obj.PassengerAirbag = strObj.PassengerAirbag;
            obj.BuckleDriver = strObj.BuckleDriver;
            obj.BucklePassenger = strObj.BucklePassenger;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.TurnSignal = feval([obj.DbwMkzMsgsTurnSignalClass '.loadobj'], strObj.TurnSignal);
            obj.Wiper = feval([obj.DbwMkzMsgsWiperClass '.loadobj'], strObj.Wiper);
            obj.AmbientLight = feval([obj.DbwMkzMsgsAmbientLightClass '.loadobj'], strObj.AmbientLight);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.HighBeamHeadlights = obj.HighBeamHeadlights;
            strObj.BtnCcOn = obj.BtnCcOn;
            strObj.BtnCcOff = obj.BtnCcOff;
            strObj.BtnCcOnOff = obj.BtnCcOnOff;
            strObj.BtnCcRes = obj.BtnCcRes;
            strObj.BtnCcCncl = obj.BtnCcCncl;
            strObj.BtnCcResCncl = obj.BtnCcResCncl;
            strObj.BtnCcSetInc = obj.BtnCcSetInc;
            strObj.BtnCcSetDec = obj.BtnCcSetDec;
            strObj.BtnCcGapInc = obj.BtnCcGapInc;
            strObj.BtnCcGapDec = obj.BtnCcGapDec;
            strObj.BtnLaOnOff = obj.BtnLaOnOff;
            strObj.FaultBus = obj.FaultBus;
            strObj.DoorDriver = obj.DoorDriver;
            strObj.DoorPassenger = obj.DoorPassenger;
            strObj.DoorRearLeft = obj.DoorRearLeft;
            strObj.DoorRearRight = obj.DoorRearRight;
            strObj.DoorHood = obj.DoorHood;
            strObj.DoorTrunk = obj.DoorTrunk;
            strObj.PassengerDetect = obj.PassengerDetect;
            strObj.PassengerAirbag = obj.PassengerAirbag;
            strObj.BuckleDriver = obj.BuckleDriver;
            strObj.BucklePassenger = obj.BucklePassenger;
            strObj.Header = saveobj(obj.Header);
            strObj.TurnSignal = saveobj(obj.TurnSignal);
            strObj.Wiper = saveobj(obj.Wiper);
            strObj.AmbientLight = saveobj(obj.AmbientLight);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dbw_mkz_msgs.Misc1Report.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dbw_mkz_msgs.Misc1Report;
            obj.reload(strObj);
        end
    end
end
