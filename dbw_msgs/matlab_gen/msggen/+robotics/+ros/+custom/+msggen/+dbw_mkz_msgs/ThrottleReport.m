classdef ThrottleReport < robotics.ros.Message
    %ThrottleReport MATLAB implementation of dbw_mkz_msgs/ThrottleReport
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dbw_mkz_msgs/ThrottleReport' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a7fd7b93c8549e83c319e38a18f6dbdc' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        DbwMkzMsgsWatchdogCounterClass = robotics.ros.msg.internal.MessageFactory.getClassForType('dbw_mkz_msgs/WatchdogCounter') % Dispatch to MATLAB class for message type dbw_mkz_msgs/WatchdogCounter
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        PedalInput
        PedalCmd
        PedalOutput
        Enabled
        Override
        Driver
        WatchdogCounter
        FaultWdc
        FaultCh1
        FaultCh2
        FaultConnector
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'WatchdogCounter', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Driver', 'Enabled', 'FaultCh1', 'FaultCh2', 'FaultConnector', 'FaultWdc', 'Header', 'Override', 'PedalCmd', 'PedalInput', 'PedalOutput', 'WatchdogCounter'} % List of non-constant message properties
        ROSPropertyList = {'driver', 'enabled', 'fault_ch1', 'fault_ch2', 'fault_connector', 'fault_wdc', 'header', 'override', 'pedal_cmd', 'pedal_input', 'pedal_output', 'watchdog_counter'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ThrottleReport(msg)
            %ThrottleReport Construct the message object ThrottleReport
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ThrottleReport', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function pedalinput = get.PedalInput(obj)
            %get.PedalInput Get the value for property PedalInput
            pedalinput = single(obj.JavaMessage.getPedalInput);
        end
        
        function set.PedalInput(obj, pedalinput)
            %set.PedalInput Set the value for property PedalInput
            validateattributes(pedalinput, {'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'PedalInput');
            
            obj.JavaMessage.setPedalInput(pedalinput);
        end
        
        function pedalcmd = get.PedalCmd(obj)
            %get.PedalCmd Get the value for property PedalCmd
            pedalcmd = single(obj.JavaMessage.getPedalCmd);
        end
        
        function set.PedalCmd(obj, pedalcmd)
            %set.PedalCmd Set the value for property PedalCmd
            validateattributes(pedalcmd, {'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'PedalCmd');
            
            obj.JavaMessage.setPedalCmd(pedalcmd);
        end
        
        function pedaloutput = get.PedalOutput(obj)
            %get.PedalOutput Get the value for property PedalOutput
            pedaloutput = single(obj.JavaMessage.getPedalOutput);
        end
        
        function set.PedalOutput(obj, pedaloutput)
            %set.PedalOutput Set the value for property PedalOutput
            validateattributes(pedaloutput, {'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'PedalOutput');
            
            obj.JavaMessage.setPedalOutput(pedaloutput);
        end
        
        function enabled = get.Enabled(obj)
            %get.Enabled Get the value for property Enabled
            enabled = logical(obj.JavaMessage.getEnabled);
        end
        
        function set.Enabled(obj, enabled)
            %set.Enabled Set the value for property Enabled
            validateattributes(enabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'Enabled');
            
            obj.JavaMessage.setEnabled(enabled);
        end
        
        function override = get.Override(obj)
            %get.Override Get the value for property Override
            override = logical(obj.JavaMessage.getOverride);
        end
        
        function set.Override(obj, override)
            %set.Override Set the value for property Override
            validateattributes(override, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'Override');
            
            obj.JavaMessage.setOverride(override);
        end
        
        function driver = get.Driver(obj)
            %get.Driver Get the value for property Driver
            driver = logical(obj.JavaMessage.getDriver);
        end
        
        function set.Driver(obj, driver)
            %set.Driver Set the value for property Driver
            validateattributes(driver, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'Driver');
            
            obj.JavaMessage.setDriver(driver);
        end
        
        function watchdogcounter = get.WatchdogCounter(obj)
            %get.WatchdogCounter Get the value for property WatchdogCounter
            if isempty(obj.Cache.WatchdogCounter)
                obj.Cache.WatchdogCounter = feval(obj.DbwMkzMsgsWatchdogCounterClass, obj.JavaMessage.getWatchdogCounter);
            end
            watchdogcounter = obj.Cache.WatchdogCounter;
        end
        
        function set.WatchdogCounter(obj, watchdogcounter)
            %set.WatchdogCounter Set the value for property WatchdogCounter
            validateattributes(watchdogcounter, {obj.DbwMkzMsgsWatchdogCounterClass}, {'nonempty', 'scalar'}, 'ThrottleReport', 'WatchdogCounter');
            
            obj.JavaMessage.setWatchdogCounter(watchdogcounter.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.WatchdogCounter)
                obj.Cache.WatchdogCounter.setJavaObject(watchdogcounter.getJavaObject);
            end
        end
        
        function faultwdc = get.FaultWdc(obj)
            %get.FaultWdc Get the value for property FaultWdc
            faultwdc = logical(obj.JavaMessage.getFaultWdc);
        end
        
        function set.FaultWdc(obj, faultwdc)
            %set.FaultWdc Set the value for property FaultWdc
            validateattributes(faultwdc, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'FaultWdc');
            
            obj.JavaMessage.setFaultWdc(faultwdc);
        end
        
        function faultch1 = get.FaultCh1(obj)
            %get.FaultCh1 Get the value for property FaultCh1
            faultch1 = logical(obj.JavaMessage.getFaultCh1);
        end
        
        function set.FaultCh1(obj, faultch1)
            %set.FaultCh1 Set the value for property FaultCh1
            validateattributes(faultch1, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'FaultCh1');
            
            obj.JavaMessage.setFaultCh1(faultch1);
        end
        
        function faultch2 = get.FaultCh2(obj)
            %get.FaultCh2 Get the value for property FaultCh2
            faultch2 = logical(obj.JavaMessage.getFaultCh2);
        end
        
        function set.FaultCh2(obj, faultch2)
            %set.FaultCh2 Set the value for property FaultCh2
            validateattributes(faultch2, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'FaultCh2');
            
            obj.JavaMessage.setFaultCh2(faultch2);
        end
        
        function faultconnector = get.FaultConnector(obj)
            %get.FaultConnector Get the value for property FaultConnector
            faultconnector = logical(obj.JavaMessage.getFaultConnector);
        end
        
        function set.FaultConnector(obj, faultconnector)
            %set.FaultConnector Set the value for property FaultConnector
            validateattributes(faultconnector, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ThrottleReport', 'FaultConnector');
            
            obj.JavaMessage.setFaultConnector(faultconnector);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.WatchdogCounter = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.PedalInput = obj.PedalInput;
            cpObj.PedalCmd = obj.PedalCmd;
            cpObj.PedalOutput = obj.PedalOutput;
            cpObj.Enabled = obj.Enabled;
            cpObj.Override = obj.Override;
            cpObj.Driver = obj.Driver;
            cpObj.FaultWdc = obj.FaultWdc;
            cpObj.FaultCh1 = obj.FaultCh1;
            cpObj.FaultCh2 = obj.FaultCh2;
            cpObj.FaultConnector = obj.FaultConnector;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.WatchdogCounter = copy(obj.WatchdogCounter);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.PedalInput = strObj.PedalInput;
            obj.PedalCmd = strObj.PedalCmd;
            obj.PedalOutput = strObj.PedalOutput;
            obj.Enabled = strObj.Enabled;
            obj.Override = strObj.Override;
            obj.Driver = strObj.Driver;
            obj.FaultWdc = strObj.FaultWdc;
            obj.FaultCh1 = strObj.FaultCh1;
            obj.FaultCh2 = strObj.FaultCh2;
            obj.FaultConnector = strObj.FaultConnector;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.WatchdogCounter = feval([obj.DbwMkzMsgsWatchdogCounterClass '.loadobj'], strObj.WatchdogCounter);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.PedalInput = obj.PedalInput;
            strObj.PedalCmd = obj.PedalCmd;
            strObj.PedalOutput = obj.PedalOutput;
            strObj.Enabled = obj.Enabled;
            strObj.Override = obj.Override;
            strObj.Driver = obj.Driver;
            strObj.FaultWdc = obj.FaultWdc;
            strObj.FaultCh1 = obj.FaultCh1;
            strObj.FaultCh2 = obj.FaultCh2;
            strObj.FaultConnector = obj.FaultConnector;
            strObj.Header = saveobj(obj.Header);
            strObj.WatchdogCounter = saveobj(obj.WatchdogCounter);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dbw_mkz_msgs.ThrottleReport.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dbw_mkz_msgs.ThrottleReport;
            obj.reload(strObj);
        end
    end
end
