classdef SteeringReport < robotics.ros.Message
    %SteeringReport MATLAB implementation of dbw_mkz_msgs/SteeringReport
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dbw_mkz_msgs/SteeringReport' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '25bf2c220d904531d8bc16ab5271325d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        SteeringWheelAngle
        SteeringWheelAngleCmd
        SteeringWheelTorque
        Speed
        Enabled
        Override
        Driver
        FaultWdc
        FaultBus1
        FaultBus2
        FaultCalibration
        FaultConnector
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Driver', 'Enabled', 'FaultBus1', 'FaultBus2', 'FaultCalibration', 'FaultConnector', 'FaultWdc', 'Header', 'Override', 'Speed', 'SteeringWheelAngle', 'SteeringWheelAngleCmd', 'SteeringWheelTorque'} % List of non-constant message properties
        ROSPropertyList = {'driver', 'enabled', 'fault_bus1', 'fault_bus2', 'fault_calibration', 'fault_connector', 'fault_wdc', 'header', 'override', 'speed', 'steering_wheel_angle', 'steering_wheel_angle_cmd', 'steering_wheel_torque'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SteeringReport(msg)
            %SteeringReport Construct the message object SteeringReport
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'SteeringReport', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function steeringwheelangle = get.SteeringWheelAngle(obj)
            %get.SteeringWheelAngle Get the value for property SteeringWheelAngle
            steeringwheelangle = single(obj.JavaMessage.getSteeringWheelAngle);
        end
        
        function set.SteeringWheelAngle(obj, steeringwheelangle)
            %set.SteeringWheelAngle Set the value for property SteeringWheelAngle
            validateattributes(steeringwheelangle, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'SteeringWheelAngle');
            
            obj.JavaMessage.setSteeringWheelAngle(steeringwheelangle);
        end
        
        function steeringwheelanglecmd = get.SteeringWheelAngleCmd(obj)
            %get.SteeringWheelAngleCmd Get the value for property SteeringWheelAngleCmd
            steeringwheelanglecmd = single(obj.JavaMessage.getSteeringWheelAngleCmd);
        end
        
        function set.SteeringWheelAngleCmd(obj, steeringwheelanglecmd)
            %set.SteeringWheelAngleCmd Set the value for property SteeringWheelAngleCmd
            validateattributes(steeringwheelanglecmd, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'SteeringWheelAngleCmd');
            
            obj.JavaMessage.setSteeringWheelAngleCmd(steeringwheelanglecmd);
        end
        
        function steeringwheeltorque = get.SteeringWheelTorque(obj)
            %get.SteeringWheelTorque Get the value for property SteeringWheelTorque
            steeringwheeltorque = single(obj.JavaMessage.getSteeringWheelTorque);
        end
        
        function set.SteeringWheelTorque(obj, steeringwheeltorque)
            %set.SteeringWheelTorque Set the value for property SteeringWheelTorque
            validateattributes(steeringwheeltorque, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'SteeringWheelTorque');
            
            obj.JavaMessage.setSteeringWheelTorque(steeringwheeltorque);
        end
        
        function speed = get.Speed(obj)
            %get.Speed Get the value for property Speed
            speed = single(obj.JavaMessage.getSpeed);
        end
        
        function set.Speed(obj, speed)
            %set.Speed Set the value for property Speed
            validateattributes(speed, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'Speed');
            
            obj.JavaMessage.setSpeed(speed);
        end
        
        function enabled = get.Enabled(obj)
            %get.Enabled Get the value for property Enabled
            enabled = logical(obj.JavaMessage.getEnabled);
        end
        
        function set.Enabled(obj, enabled)
            %set.Enabled Set the value for property Enabled
            validateattributes(enabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'Enabled');
            
            obj.JavaMessage.setEnabled(enabled);
        end
        
        function override = get.Override(obj)
            %get.Override Get the value for property Override
            override = logical(obj.JavaMessage.getOverride);
        end
        
        function set.Override(obj, override)
            %set.Override Set the value for property Override
            validateattributes(override, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'Override');
            
            obj.JavaMessage.setOverride(override);
        end
        
        function driver = get.Driver(obj)
            %get.Driver Get the value for property Driver
            driver = logical(obj.JavaMessage.getDriver);
        end
        
        function set.Driver(obj, driver)
            %set.Driver Set the value for property Driver
            validateattributes(driver, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'Driver');
            
            obj.JavaMessage.setDriver(driver);
        end
        
        function faultwdc = get.FaultWdc(obj)
            %get.FaultWdc Get the value for property FaultWdc
            faultwdc = logical(obj.JavaMessage.getFaultWdc);
        end
        
        function set.FaultWdc(obj, faultwdc)
            %set.FaultWdc Set the value for property FaultWdc
            validateattributes(faultwdc, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'FaultWdc');
            
            obj.JavaMessage.setFaultWdc(faultwdc);
        end
        
        function faultbus1 = get.FaultBus1(obj)
            %get.FaultBus1 Get the value for property FaultBus1
            faultbus1 = logical(obj.JavaMessage.getFaultBus1);
        end
        
        function set.FaultBus1(obj, faultbus1)
            %set.FaultBus1 Set the value for property FaultBus1
            validateattributes(faultbus1, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'FaultBus1');
            
            obj.JavaMessage.setFaultBus1(faultbus1);
        end
        
        function faultbus2 = get.FaultBus2(obj)
            %get.FaultBus2 Get the value for property FaultBus2
            faultbus2 = logical(obj.JavaMessage.getFaultBus2);
        end
        
        function set.FaultBus2(obj, faultbus2)
            %set.FaultBus2 Set the value for property FaultBus2
            validateattributes(faultbus2, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'FaultBus2');
            
            obj.JavaMessage.setFaultBus2(faultbus2);
        end
        
        function faultcalibration = get.FaultCalibration(obj)
            %get.FaultCalibration Get the value for property FaultCalibration
            faultcalibration = logical(obj.JavaMessage.getFaultCalibration);
        end
        
        function set.FaultCalibration(obj, faultcalibration)
            %set.FaultCalibration Set the value for property FaultCalibration
            validateattributes(faultcalibration, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'FaultCalibration');
            
            obj.JavaMessage.setFaultCalibration(faultcalibration);
        end
        
        function faultconnector = get.FaultConnector(obj)
            %get.FaultConnector Get the value for property FaultConnector
            faultconnector = logical(obj.JavaMessage.getFaultConnector);
        end
        
        function set.FaultConnector(obj, faultconnector)
            %set.FaultConnector Set the value for property FaultConnector
            validateattributes(faultconnector, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringReport', 'FaultConnector');
            
            obj.JavaMessage.setFaultConnector(faultconnector);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SteeringWheelAngle = obj.SteeringWheelAngle;
            cpObj.SteeringWheelAngleCmd = obj.SteeringWheelAngleCmd;
            cpObj.SteeringWheelTorque = obj.SteeringWheelTorque;
            cpObj.Speed = obj.Speed;
            cpObj.Enabled = obj.Enabled;
            cpObj.Override = obj.Override;
            cpObj.Driver = obj.Driver;
            cpObj.FaultWdc = obj.FaultWdc;
            cpObj.FaultBus1 = obj.FaultBus1;
            cpObj.FaultBus2 = obj.FaultBus2;
            cpObj.FaultCalibration = obj.FaultCalibration;
            cpObj.FaultConnector = obj.FaultConnector;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SteeringWheelAngle = strObj.SteeringWheelAngle;
            obj.SteeringWheelAngleCmd = strObj.SteeringWheelAngleCmd;
            obj.SteeringWheelTorque = strObj.SteeringWheelTorque;
            obj.Speed = strObj.Speed;
            obj.Enabled = strObj.Enabled;
            obj.Override = strObj.Override;
            obj.Driver = strObj.Driver;
            obj.FaultWdc = strObj.FaultWdc;
            obj.FaultBus1 = strObj.FaultBus1;
            obj.FaultBus2 = strObj.FaultBus2;
            obj.FaultCalibration = strObj.FaultCalibration;
            obj.FaultConnector = strObj.FaultConnector;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SteeringWheelAngle = obj.SteeringWheelAngle;
            strObj.SteeringWheelAngleCmd = obj.SteeringWheelAngleCmd;
            strObj.SteeringWheelTorque = obj.SteeringWheelTorque;
            strObj.Speed = obj.Speed;
            strObj.Enabled = obj.Enabled;
            strObj.Override = obj.Override;
            strObj.Driver = obj.Driver;
            strObj.FaultWdc = obj.FaultWdc;
            strObj.FaultBus1 = obj.FaultBus1;
            strObj.FaultBus2 = obj.FaultBus2;
            strObj.FaultCalibration = obj.FaultCalibration;
            strObj.FaultConnector = obj.FaultConnector;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dbw_mkz_msgs.SteeringReport.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dbw_mkz_msgs.SteeringReport;
            obj.reload(strObj);
        end
    end
end
