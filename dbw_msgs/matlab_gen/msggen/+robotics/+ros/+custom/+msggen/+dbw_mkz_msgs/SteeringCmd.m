classdef SteeringCmd < robotics.ros.Message
    %SteeringCmd MATLAB implementation of dbw_mkz_msgs/SteeringCmd
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'dbw_mkz_msgs/SteeringCmd' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '042926cddf5be8099d43692732201784' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SteeringWheelAngleCmd
        SteeringWheelAngleVelocity
        Enable
        Ignore
        Quiet
        Count
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Count', 'Enable', 'Ignore', 'Quiet', 'SteeringWheelAngleCmd', 'SteeringWheelAngleVelocity'} % List of non-constant message properties
        ROSPropertyList = {'count', 'enable', 'ignore', 'quiet', 'steering_wheel_angle_cmd', 'steering_wheel_angle_velocity'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = SteeringCmd(msg)
            %SteeringCmd Construct the message object SteeringCmd
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function steeringwheelanglecmd = get.SteeringWheelAngleCmd(obj)
            %get.SteeringWheelAngleCmd Get the value for property SteeringWheelAngleCmd
            steeringwheelanglecmd = single(obj.JavaMessage.getSteeringWheelAngleCmd);
        end
        
        function set.SteeringWheelAngleCmd(obj, steeringwheelanglecmd)
            %set.SteeringWheelAngleCmd Set the value for property SteeringWheelAngleCmd
            validateattributes(steeringwheelanglecmd, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'SteeringWheelAngleCmd');
            
            obj.JavaMessage.setSteeringWheelAngleCmd(steeringwheelanglecmd);
        end
        
        function steeringwheelanglevelocity = get.SteeringWheelAngleVelocity(obj)
            %get.SteeringWheelAngleVelocity Get the value for property SteeringWheelAngleVelocity
            steeringwheelanglevelocity = single(obj.JavaMessage.getSteeringWheelAngleVelocity);
        end
        
        function set.SteeringWheelAngleVelocity(obj, steeringwheelanglevelocity)
            %set.SteeringWheelAngleVelocity Set the value for property SteeringWheelAngleVelocity
            validateattributes(steeringwheelanglevelocity, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'SteeringWheelAngleVelocity');
            
            obj.JavaMessage.setSteeringWheelAngleVelocity(steeringwheelanglevelocity);
        end
        
        function enable = get.Enable(obj)
            %get.Enable Get the value for property Enable
            enable = logical(obj.JavaMessage.getEnable);
        end
        
        function set.Enable(obj, enable)
            %set.Enable Set the value for property Enable
            validateattributes(enable, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'Enable');
            
            obj.JavaMessage.setEnable(enable);
        end
        
        function ignore = get.Ignore(obj)
            %get.Ignore Get the value for property Ignore
            ignore = logical(obj.JavaMessage.getIgnore);
        end
        
        function set.Ignore(obj, ignore)
            %set.Ignore Set the value for property Ignore
            validateattributes(ignore, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'Ignore');
            
            obj.JavaMessage.setIgnore(ignore);
        end
        
        function quiet = get.Quiet(obj)
            %get.Quiet Get the value for property Quiet
            quiet = logical(obj.JavaMessage.getQuiet);
        end
        
        function set.Quiet(obj, quiet)
            %set.Quiet Set the value for property Quiet
            validateattributes(quiet, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'Quiet');
            
            obj.JavaMessage.setQuiet(quiet);
        end
        
        function count = get.Count(obj)
            %get.Count Get the value for property Count
            count = typecast(int8(obj.JavaMessage.getCount), 'uint8');
        end
        
        function set.Count(obj, count)
            %set.Count Set the value for property Count
            validateattributes(count, {'numeric'}, {'nonempty', 'scalar'}, 'SteeringCmd', 'Count');
            
            obj.JavaMessage.setCount(count);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SteeringWheelAngleCmd = obj.SteeringWheelAngleCmd;
            cpObj.SteeringWheelAngleVelocity = obj.SteeringWheelAngleVelocity;
            cpObj.Enable = obj.Enable;
            cpObj.Ignore = obj.Ignore;
            cpObj.Quiet = obj.Quiet;
            cpObj.Count = obj.Count;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SteeringWheelAngleCmd = strObj.SteeringWheelAngleCmd;
            obj.SteeringWheelAngleVelocity = strObj.SteeringWheelAngleVelocity;
            obj.Enable = strObj.Enable;
            obj.Ignore = strObj.Ignore;
            obj.Quiet = strObj.Quiet;
            obj.Count = strObj.Count;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SteeringWheelAngleCmd = obj.SteeringWheelAngleCmd;
            strObj.SteeringWheelAngleVelocity = obj.SteeringWheelAngleVelocity;
            strObj.Enable = obj.Enable;
            strObj.Ignore = obj.Ignore;
            strObj.Quiet = obj.Quiet;
            strObj.Count = obj.Count;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.dbw_mkz_msgs.SteeringCmd.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.dbw_mkz_msgs.SteeringCmd;
            obj.reload(strObj);
        end
    end
end
